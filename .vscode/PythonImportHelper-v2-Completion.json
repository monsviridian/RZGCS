[
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QStringListModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QAbstractListModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "SerialConnector",
        "importPath": "serial_connector",
        "description": "serial_connector",
        "isExtraImport": true,
        "detail": "serial_connector",
        "documentation": {}
    },
    {
        "label": "MotorController",
        "importPath": "motor_controller",
        "description": "motor_controller",
        "isExtraImport": true,
        "detail": "motor_controller",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "logger",
        "description": "logger",
        "isExtraImport": true,
        "detail": "logger",
        "documentation": {}
    },
    {
        "label": "ConnectRequest",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MotorTestRequest",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "MavsdkConnector",
        "importPath": "mavsdk_connector",
        "description": "mavsdk_connector",
        "isExtraImport": true,
        "detail": "mavsdk_connector",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "System",
        "importPath": "mavsdk",
        "description": "mavsdk",
        "isExtraImport": true,
        "detail": "mavsdk",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "serial.tools.list_ports",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial.tools.list_ports",
        "description": "serial.tools.list_ports",
        "detail": "serial.tools.list_ports",
        "documentation": {}
    },
    {
        "label": "MAVLinkConnector",
        "importPath": "backend.mavlink_connector",
        "description": "backend.mavlink_connector",
        "isExtraImport": true,
        "detail": "backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "backend.logger",
        "description": "backend.logger",
        "isExtraImport": true,
        "detail": "backend.logger",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "backend.logger",
        "description": "backend.logger",
        "isExtraImport": true,
        "detail": "backend.logger",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PySide6.QtQml",
        "description": "PySide6.QtQml",
        "isExtraImport": true,
        "detail": "PySide6.QtQml",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "autogen.settings",
        "description": "autogen.settings",
        "isExtraImport": true,
        "detail": "autogen.settings",
        "documentation": {}
    },
    {
        "label": "import_paths",
        "importPath": "autogen.settings",
        "description": "autogen.settings",
        "isExtraImport": true,
        "detail": "autogen.settings",
        "documentation": {}
    },
    {
        "label": "SerialConnector",
        "importPath": "backend.serial_connector",
        "description": "backend.serial_connector",
        "isExtraImport": true,
        "detail": "backend.serial_connector",
        "documentation": {}
    },
    {
        "label": "SensorViewModel",
        "importPath": "backend.sensorviewmodel",
        "description": "backend.sensorviewmodel",
        "isExtraImport": true,
        "detail": "backend.sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Python.autogen.settings",
        "description": "Python.autogen.settings",
        "peekOfCode": "url = \"RZGCSContent/App.qml\"\nimport_paths = [\n    \".\",\n]",
        "detail": "Python.autogen.settings",
        "documentation": {}
    },
    {
        "label": "import_paths",
        "kind": 5,
        "importPath": "Python.autogen.settings",
        "description": "Python.autogen.settings",
        "peekOfCode": "import_paths = [\n    \".\",\n]",
        "detail": "Python.autogen.settings",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 6,
        "importPath": "Python.backend.logger",
        "description": "Python.backend.logger",
        "peekOfCode": "class Logger(QObject):\n    logAdded = Signal(str)\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self._logs = QStringListModel()\n    @Slot(str)\n    def add_log(self, message: str):\n        # Zeitstempel hinzufügen\n        timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        log_message = f\"[{timestamp}] {message}\"",
        "detail": "Python.backend.logger",
        "documentation": {}
    },
    {
        "label": "ConnectRequest",
        "kind": 6,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "class ConnectRequest(BaseModel):\n    port: str\n    baudrate: int\n    autopilot: str\n@app.post(\"/serial/connect\")\nasync def connect_serial(req: ConnectRequest):\n    if req.autopilot.lower() == \"ardupilot\":\n        await mavsdk.connect(port=req.port, baudrate=req.baudrate)\n        return {\"status\": \"connected\"} if mavsdk.is_connected() else {\"status\": \"failed\"}\n    else:",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "connect_to_flight_controller",
        "kind": 2,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "def connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")\ndef test_motor(data: MotorTestRequest):\n    motor_controller.test_motor(data.motor_id, data.throttle)\n    return {\"status\": \"running\"}\n@app.get(\"/logs\")\ndef get_logs():\n    return logger.read_logs()",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "test_motor",
        "kind": 2,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "def test_motor(data: MotorTestRequest):\n    motor_controller.test_motor(data.motor_id, data.throttle)\n    return {\"status\": \"running\"}\n@app.get(\"/logs\")\ndef get_logs():\n    return logger.read_logs()\n@app.get(\"/parameters\")\ndef get_parameters():\n    return serial_handler.read_parameters()\nclass ConnectRequest(BaseModel):",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "get_logs",
        "kind": 2,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "def get_logs():\n    return logger.read_logs()\n@app.get(\"/parameters\")\ndef get_parameters():\n    return serial_handler.read_parameters()\nclass ConnectRequest(BaseModel):\n    port: str\n    baudrate: int\n    autopilot: str\n@app.post(\"/serial/connect\")",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "get_parameters",
        "kind": 2,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "def get_parameters():\n    return serial_handler.read_parameters()\nclass ConnectRequest(BaseModel):\n    port: str\n    baudrate: int\n    autopilot: str\n@app.post(\"/serial/connect\")\nasync def connect_serial(req: ConnectRequest):\n    if req.autopilot.lower() == \"ardupilot\":\n        await mavsdk.connect(port=req.port, baudrate=req.baudrate)",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "app = FastAPI()\nserial_handler = SerialConnector()\nmotor_controller = MotorController(serial_handler)\nlogger = Logger()\nmavsdk = MavsdkConnector()\n@app.post(\"/connect\")\ndef connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "serial_handler",
        "kind": 5,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "serial_handler = SerialConnector()\nmotor_controller = MotorController(serial_handler)\nlogger = Logger()\nmavsdk = MavsdkConnector()\n@app.post(\"/connect\")\ndef connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")\ndef test_motor(data: MotorTestRequest):",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "motor_controller",
        "kind": 5,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "motor_controller = MotorController(serial_handler)\nlogger = Logger()\nmavsdk = MavsdkConnector()\n@app.post(\"/connect\")\ndef connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")\ndef test_motor(data: MotorTestRequest):\n    motor_controller.test_motor(data.motor_id, data.throttle)",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "logger = Logger()\nmavsdk = MavsdkConnector()\n@app.post(\"/connect\")\ndef connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")\ndef test_motor(data: MotorTestRequest):\n    motor_controller.test_motor(data.motor_id, data.throttle)\n    return {\"status\": \"running\"}",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "mavsdk",
        "kind": 5,
        "importPath": "Python.backend.main",
        "description": "Python.backend.main",
        "peekOfCode": "mavsdk = MavsdkConnector()\n@app.post(\"/connect\")\ndef connect_to_flight_controller(data: ConnectRequest):\n    success = serial_handler.connect(data.port, data.baudrate)\n    return {\"connected\": success}\n@app.post(\"/motor/test\")\ndef test_motor(data: MotorTestRequest):\n    motor_controller.test_motor(data.motor_id, data.throttle)\n    return {\"status\": \"running\"}\n@app.get(\"/logs\")",
        "detail": "Python.backend.main",
        "documentation": {}
    },
    {
        "label": "MAVLinkConnector",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class MAVLinkConnector(QObject):\n    log_received = Signal(str)\n    gps_msg = Signal(float, float)\n    attitude_msg = Signal(float, float, float)\n    sensor_data = Signal(str, float)  # NEU\n    def __init__(self, port, baudrate):\n        super().__init__()\n        self.port = port\n        self.baudrate = baudrate\n        self.master = None",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MAVSDKConnector",
        "kind": 6,
        "importPath": "Python.backend.mavsdk_connector",
        "description": "Python.backend.mavsdk_connector",
        "peekOfCode": "class MAVSDKConnector(QObject):\n    connected_changed = Signal(bool)\n    telemetry_updated = Signal(float, float, float)  # latitude, longitude, altitude\n    gps_status_changed = Signal(bool)\n    calibration_status_changed = Signal(bool)\n    status_message_received = Signal(str)\n    def __init__(self, logger: Logger, sensor: SensorViewModel):\n        super().__init__()\n        self.logger = logger\n        self.sensor = sensor",
        "detail": "Python.backend.mavsdk_connector",
        "documentation": {}
    },
    {
        "label": "ConnectRequest",
        "kind": 6,
        "importPath": "Python.backend.models",
        "description": "Python.backend.models",
        "peekOfCode": "class ConnectRequest(BaseModel):\n    port: str\n    baudrate: int\nclass MotorTestRequest(BaseModel):\n    motor_id: int\n    throttle: float",
        "detail": "Python.backend.models",
        "documentation": {}
    },
    {
        "label": "MotorTestRequest",
        "kind": 6,
        "importPath": "Python.backend.models",
        "description": "Python.backend.models",
        "peekOfCode": "class MotorTestRequest(BaseModel):\n    motor_id: int\n    throttle: float",
        "detail": "Python.backend.models",
        "documentation": {}
    },
    {
        "label": "MotorController",
        "kind": 6,
        "importPath": "Python.backend.motor_controller",
        "description": "Python.backend.motor_controller",
        "peekOfCode": "class MotorController:\n    def __init__(self, serial_handler):\n        self.serial_handler = serial_handler\n    def test_motor(self, motor_id, throttle):\n        cmd = f\"MOTOR_TEST {motor_id} {throttle}\"\n        self.serial_handler.send_command(cmd)",
        "detail": "Python.backend.motor_controller",
        "documentation": {}
    },
    {
        "label": "SensorViewModel",
        "kind": 6,
        "importPath": "Python.backend.sensorviewmodel",
        "description": "Python.backend.sensorviewmodel",
        "peekOfCode": "class SensorViewModel(QAbstractListModel):\n    NameRole = Qt.UserRole + 1\n    ValueRole = Qt.UserRole + 2\n    FormattedValueRole = Qt.UserRole + 3  # ✅ Neue Rolle für formatierten Text\n    def __init__(self):\n        super().__init__()\n        self._sensors = [\n            {\"name\": \"Roll\", \"value\": 0.0},\n            {\"name\": \"Pitch\", \"value\": 0.0},\n            {\"name\": \"Yaw\", \"value\": 0.0},",
        "detail": "Python.backend.sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "SerialConnector",
        "kind": 6,
        "importPath": "Python.backend.serial_connector",
        "description": "Python.backend.serial_connector",
        "peekOfCode": "class SerialConnector(QObject):\n    available_ports_changed = Signal(list)\n    connection_successful = Signal()\n    gps_msg = Signal(float, float)\n    attitude_msg = Signal(float, float, float)\n    def __init__(self, sensor_model: SensorViewModel, logger: Logger):\n        super().__init__()\n        self.sensor_model = sensor_model\n        self.logger = logger  # ⬅️ Logger speichern\n        self.ardupilot_reader = None",
        "detail": "Python.backend.serial_connector",
        "documentation": {}
    },
    {
        "label": "os.environ[\"QT_QUICK_CONTROLS_STYLE\"]",
        "kind": 5,
        "importPath": "Python.backend.serial_connector",
        "description": "Python.backend.serial_connector",
        "peekOfCode": "os.environ[\"QT_QUICK_CONTROLS_STYLE\"] = \"Fusion\"\n# backend/serial_connector.py\nfrom backend.logger import Logger  # ⬅️ Logger importieren\nclass SerialConnector(QObject):\n    available_ports_changed = Signal(list)\n    connection_successful = Signal()\n    gps_msg = Signal(float, float)\n    attitude_msg = Signal(float, float, float)\n    def __init__(self, sensor_model: SensorViewModel, logger: Logger):\n        super().__init__()",
        "detail": "Python.backend.serial_connector",
        "documentation": {}
    }
]