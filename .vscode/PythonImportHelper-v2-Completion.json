[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QAbstractListModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QAbstractListModel",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QCoreApplication",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "Slot",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "QUrl",
        "importPath": "PySide6.QtCore",
        "description": "PySide6.QtCore",
        "isExtraImport": true,
        "detail": "PySide6.QtCore",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "threading,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading.",
        "description": "threading.",
        "detail": "threading.",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "mavutil",
        "importPath": "pymavlink",
        "description": "pymavlink",
        "isExtraImport": true,
        "detail": "pymavlink",
        "documentation": {}
    },
    {
        "label": "ardupilotmega",
        "importPath": "pymavlink.dialects.v20",
        "description": "pymavlink.dialects.v20",
        "isExtraImport": true,
        "detail": "pymavlink.dialects.v20",
        "documentation": {}
    },
    {
        "label": "ardupilotmega",
        "importPath": "pymavlink.dialects.v20",
        "description": "pymavlink.dialects.v20",
        "isExtraImport": true,
        "detail": "pymavlink.dialects.v20",
        "documentation": {}
    },
    {
        "label": "ardupilotmega",
        "importPath": "pymavlink.dialects.v20",
        "description": "pymavlink.dialects.v20",
        "isExtraImport": true,
        "detail": "pymavlink.dialects.v20",
        "documentation": {}
    },
    {
        "label": "serial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial",
        "description": "serial",
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "serial.tools.list_ports",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial.tools.list_ports",
        "description": "serial.tools.list_ports",
        "detail": "serial.tools.list_ports",
        "documentation": {}
    },
    {
        "label": "QSerialPort",
        "importPath": "PySide6.QtSerialPort",
        "description": "PySide6.QtSerialPort",
        "isExtraImport": true,
        "detail": "PySide6.QtSerialPort",
        "documentation": {}
    },
    {
        "label": "QSerialPortInfo",
        "importPath": "PySide6.QtSerialPort",
        "description": "PySide6.QtSerialPort",
        "isExtraImport": true,
        "detail": "PySide6.QtSerialPort",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "MAVLinkConnector",
        "importPath": "backend.mavlink_connector",
        "description": "backend.mavlink_connector",
        "isExtraImport": true,
        "detail": "backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MavlinkConnector",
        "importPath": "backend.mavlink_connector",
        "description": "backend.mavlink_connector",
        "isExtraImport": true,
        "detail": "backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MAVLinkConnector",
        "importPath": "backend.mavlink_connector",
        "description": "backend.mavlink_connector",
        "isExtraImport": true,
        "detail": "backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "backend.logger",
        "description": "backend.logger",
        "isExtraImport": true,
        "detail": "backend.logger",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "backend.logger",
        "description": "backend.logger",
        "isExtraImport": true,
        "detail": "backend.logger",
        "documentation": {}
    },
    {
        "label": "ParameterTableModel",
        "importPath": "backend.parameter_model",
        "description": "backend.parameter_model",
        "isExtraImport": true,
        "detail": "backend.parameter_model",
        "documentation": {}
    },
    {
        "label": "ParameterTableModel",
        "importPath": "backend.parameter_model",
        "description": "backend.parameter_model",
        "isExtraImport": true,
        "detail": "backend.parameter_model",
        "documentation": {}
    },
    {
        "label": "ParameterTableModel",
        "importPath": "backend.parameter_model",
        "description": "backend.parameter_model",
        "isExtraImport": true,
        "detail": "backend.parameter_model",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "ConnectionTimeoutError",
        "importPath": "backend.exceptions",
        "description": "backend.exceptions",
        "isExtraImport": true,
        "detail": "backend.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "importPath": "backend.exceptions",
        "description": "backend.exceptions",
        "isExtraImport": true,
        "detail": "backend.exceptions",
        "documentation": {}
    },
    {
        "label": "SensorException",
        "importPath": "backend.exceptions",
        "description": "backend.exceptions",
        "isExtraImport": true,
        "detail": "backend.exceptions",
        "documentation": {}
    },
    {
        "label": "SensorViewModel",
        "importPath": "backend.sensorviewmodel",
        "description": "backend.sensorviewmodel",
        "isExtraImport": true,
        "detail": "backend.sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "SensorViewModel",
        "importPath": "backend.sensorviewmodel",
        "description": "backend.sensorviewmodel",
        "isExtraImport": true,
        "detail": "backend.sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "SimulatedDrone",
        "importPath": "backend.simulated_drone",
        "description": "backend.simulated_drone",
        "isExtraImport": true,
        "detail": "backend.simulated_drone",
        "documentation": {}
    },
    {
        "label": "SimulatedDrone",
        "importPath": "backend.simulated_drone",
        "description": "backend.simulated_drone",
        "isExtraImport": true,
        "detail": "backend.simulated_drone",
        "documentation": {}
    },
    {
        "label": "SimulatedDrone",
        "importPath": "backend.simulated_drone",
        "description": "backend.simulated_drone",
        "isExtraImport": true,
        "detail": "backend.simulated_drone",
        "documentation": {}
    },
    {
        "label": "qasync",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qasync",
        "description": "qasync",
        "detail": "qasync",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PySide6.QtGui",
        "description": "PySide6.QtGui",
        "isExtraImport": true,
        "detail": "PySide6.QtGui",
        "documentation": {}
    },
    {
        "label": "QQmlApplicationEngine",
        "importPath": "PySide6.QtQml",
        "description": "PySide6.QtQml",
        "isExtraImport": true,
        "detail": "PySide6.QtQml",
        "documentation": {}
    },
    {
        "label": "SerialConnector",
        "importPath": "backend.serial_connector",
        "description": "backend.serial_connector",
        "isExtraImport": true,
        "detail": "backend.serial_connector",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "Python.autogen.settings",
        "description": "Python.autogen.settings",
        "peekOfCode": "url = \"RZGCSContent/App.qml\"\nimport_paths = [\n    \".\",\n]",
        "detail": "Python.autogen.settings",
        "documentation": {}
    },
    {
        "label": "import_paths",
        "kind": 5,
        "importPath": "Python.autogen.settings",
        "description": "Python.autogen.settings",
        "peekOfCode": "import_paths = [\n    \".\",\n]",
        "detail": "Python.autogen.settings",
        "documentation": {}
    },
    {
        "label": "DroneException",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class DroneException(Exception):\n    \"\"\"Basis-Exception für alle drohnenbezogenen Fehler\"\"\"\n    def __init__(self, message: str, error_code: Optional[int] = None):\n        self.message = message\n        self.error_code = error_code\n        super().__init__(self.message)\nclass ConnectionException(DroneException):\n    \"\"\"Exception für Verbindungsfehler\"\"\"\n    pass\nclass SensorException(DroneException):",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionException",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class ConnectionException(DroneException):\n    \"\"\"Exception für Verbindungsfehler\"\"\"\n    pass\nclass SensorException(DroneException):\n    \"\"\"Exception für Sensorfehler\"\"\"\n    pass\nclass MotorException(DroneException):\n    \"\"\"Exception für Motorfehler\"\"\"\n    pass\nclass CalibrationException(DroneException):",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "SensorException",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class SensorException(DroneException):\n    \"\"\"Exception für Sensorfehler\"\"\"\n    pass\nclass MotorException(DroneException):\n    \"\"\"Exception für Motorfehler\"\"\"\n    pass\nclass CalibrationException(DroneException):\n    \"\"\"Exception für Kalibrierungsfehler\"\"\"\n    pass\nclass ConnectionTimeoutError(Exception):",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "MotorException",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class MotorException(DroneException):\n    \"\"\"Exception für Motorfehler\"\"\"\n    pass\nclass CalibrationException(DroneException):\n    \"\"\"Exception für Kalibrierungsfehler\"\"\"\n    pass\nclass ConnectionTimeoutError(Exception):\n    \"\"\"Raised when a connection attempt times out.\"\"\"\n    pass\nclass ConnectionError(Exception):",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "CalibrationException",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class CalibrationException(DroneException):\n    \"\"\"Exception für Kalibrierungsfehler\"\"\"\n    pass\nclass ConnectionTimeoutError(Exception):\n    \"\"\"Raised when a connection attempt times out.\"\"\"\n    pass\nclass ConnectionError(Exception):\n    \"\"\"Raised when a connection attempt fails.\"\"\"\n    pass",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionTimeoutError",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class ConnectionTimeoutError(Exception):\n    \"\"\"Raised when a connection attempt times out.\"\"\"\n    pass\nclass ConnectionError(Exception):\n    \"\"\"Raised when a connection attempt fails.\"\"\"\n    pass",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "kind": 6,
        "importPath": "Python.backend.exceptions",
        "description": "Python.backend.exceptions",
        "peekOfCode": "class ConnectionError(Exception):\n    \"\"\"Raised when a connection attempt fails.\"\"\"\n    pass",
        "detail": "Python.backend.exceptions",
        "documentation": {}
    },
    {
        "label": "Logger",
        "kind": 6,
        "importPath": "Python.backend.logger",
        "description": "Python.backend.logger",
        "peekOfCode": "class Logger(QObject):\n    logAdded = Signal(str)\n    logsChanged = Signal()\n    def __init__(self):\n        super().__init__()\n        self._logs = []\n        self._max_logs = 1000  # Maximum number of logs to keep\n        # Configure logging\n        logging.basicConfig(\n            level=logging.INFO,",
        "detail": "Python.backend.logger",
        "documentation": {}
    },
    {
        "label": "ConnectorType",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class ConnectorType(Enum):\n    PYMAVLINK = \"pymavlink\"\n    MAVSDK = \"mavsdk\"\ndef get_mavsdk_server_path() -> str:\n    \"\"\"Ermittelt den Pfad zum MAVSDK-Server basierend auf dem Betriebssystem\"\"\"\n    # Basis-Pfad zum Projekt-Ordner\n    base_path = pathlib.Path(__file__).parent.parent.parent\n    mavsdk_path = base_path / \"mavsdk_server\"\n    if sys.platform == \"win32\":\n        server_path = mavsdk_path / \"windows\" / \"mavsdk-server.exe\"",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "DroneConnectorMeta",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class DroneConnectorMeta(type(QObject), type(ABC)):\n    pass\nclass DroneConnectorBase(QObject, ABC, metaclass=DroneConnectorMeta):\n    \"\"\"Basis-Klasse für Drohnen-Verbindungen\"\"\"\n    # Gemeinsame Signals für alle Connector-Implementierungen\n    log_received = Signal(str)  # Logging-Nachrichten\n    gps_msg = Signal(float, float)  # Latitude, Longitude\n    attitude_msg = Signal(float, float, float)  # Roll, Pitch, Yaw\n    sensor_data = Signal(str, float)  # Sensor-Name, Wert\n    connection_status = Signal(bool)  # Verbindungsstatus",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "DroneConnectorBase",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class DroneConnectorBase(QObject, ABC, metaclass=DroneConnectorMeta):\n    \"\"\"Basis-Klasse für Drohnen-Verbindungen\"\"\"\n    # Gemeinsame Signals für alle Connector-Implementierungen\n    log_received = Signal(str)  # Logging-Nachrichten\n    gps_msg = Signal(float, float)  # Latitude, Longitude\n    attitude_msg = Signal(float, float, float)  # Roll, Pitch, Yaw\n    sensor_data = Signal(str, float)  # Sensor-Name, Wert\n    connection_status = Signal(bool)  # Verbindungsstatus\n    def __init__(self):\n        \"\"\"Initialisiert die Basisklasse\"\"\"",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MAVSDKConnector",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class MAVSDKConnector(DroneConnectorBase):\n    \"\"\"MAVSDK-basierte Implementierung\"\"\"\n    def __init__(self, connection_string: str):\n        \"\"\"Initialisiert den MAVSDK-Connector\"\"\"\n        super().__init__()\n        self.connection_string = connection_string\n        self.mavsdk_server_process = None\n        self.drone = None\n        self._reconnect_task = None\n        self._connection_check_interval = 5  # Sekunden zwischen Verbindungsprüfungen",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MAVLinkConnector",
        "kind": 6,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "class MAVLinkConnector(DroneConnectorBase):\n    \"\"\"Handles MAVLink connection to simulator\"\"\"\n    # Signals\n    log_received = Signal(str)\n    error_occurred = Signal(str)\n    def __init__(self, port=\"udpin:localhost:14550\"):\n        super().__init__()\n        self._port = port\n        self._connection = None\n        self._running = False",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "get_mavsdk_server_path",
        "kind": 2,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "def get_mavsdk_server_path() -> str:\n    \"\"\"Ermittelt den Pfad zum MAVSDK-Server basierend auf dem Betriebssystem\"\"\"\n    # Basis-Pfad zum Projekt-Ordner\n    base_path = pathlib.Path(__file__).parent.parent.parent\n    mavsdk_path = base_path / \"mavsdk_server\"\n    if sys.platform == \"win32\":\n        server_path = mavsdk_path / \"windows\" / \"mavsdk-server.exe\"\n    elif sys.platform == \"darwin\":  # macOS\n        server_path = mavsdk_path / \"mac\" / \"mavsdk-server\"\n    else:  # Linux",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "create_connector",
        "kind": 2,
        "importPath": "Python.backend.mavlink_connector",
        "description": "Python.backend.mavlink_connector",
        "peekOfCode": "def create_connector(connector_type: ConnectorType, **kwargs) -> DroneConnectorBase:\n    \"\"\"Factory-Methode für Connector-Erstellung\"\"\"\n    try:\n        if connector_type == ConnectorType.MAVSDK:\n            if 'connection_string' not in kwargs:\n                raise ValueError(\"connection_string ist erforderlich für MAVSDK\")\n            return MAVSDKConnector(kwargs['connection_string'])\n        else:  # PYMAVLINK\n            if 'port' not in kwargs or 'baudrate' not in kwargs:\n                raise ValueError(\"port und baudrate sind erforderlich für MAVLink\")",
        "detail": "Python.backend.mavlink_connector",
        "documentation": {}
    },
    {
        "label": "MAVLinkProtocol",
        "kind": 6,
        "importPath": "Python.backend.mavlink_protocol",
        "description": "Python.backend.mavlink_protocol",
        "peekOfCode": "class MAVLinkProtocol(QObject):\n    \"\"\"\n    Handles low-level MAVLink communication.\n    Similar to QGroundControl's MAVLinkProtocol implementation.\n    \"\"\"\n    # Signals\n    message_received = Signal(object)  # Emitted when a MAVLink message is received\n    connection_status_changed = Signal(bool)  # True if connected\n    protocol_status_changed = Signal(str)  # Status message\n    error_occurred = Signal(str)  # Error message",
        "detail": "Python.backend.mavlink_protocol",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "kind": 6,
        "importPath": "Python.backend.message_handler",
        "description": "Python.backend.message_handler",
        "peekOfCode": "class MessageHandler(QObject):\n    \"\"\"Handles MAVLink message processing and distribution\"\"\"\n    # Signals for different message types\n    heartbeat_received = Signal(object)\n    attitude_received = Signal(object)\n    gps_received = Signal(object)\n    battery_received = Signal(object)\n    status_text_received = Signal(object)\n    parameter_received = Signal(object)\n    error_occurred = Signal(str)",
        "detail": "Python.backend.message_handler",
        "documentation": {}
    },
    {
        "label": "ParameterManager",
        "kind": 6,
        "importPath": "Python.backend.parameter_manager",
        "description": "Python.backend.parameter_manager",
        "peekOfCode": "class ParameterManager(QObject):\n    \"\"\"Manages parameter data and updates\"\"\"\n    # Signals\n    parametersLoaded = Signal(list)  # Emits list of parameters\n    parameterUpdated = Signal(str, float)  # Emits parameter name and value\n    errorOccurred = Signal(str)  # Emits error message\n    def __init__(self, parameter_model: ParameterTableModel, logger: Logger):\n        super().__init__()\n        self._parameter_model = parameter_model\n        self._logger = logger",
        "detail": "Python.backend.parameter_manager",
        "documentation": {}
    },
    {
        "label": "ParameterTableModel",
        "kind": 6,
        "importPath": "Python.backend.parameter_model",
        "description": "Python.backend.parameter_model",
        "peekOfCode": "class ParameterTableModel(QAbstractListModel):\n    NameRole = Qt.UserRole + 1\n    ValueRole = Qt.UserRole + 2\n    DefaultValueRole = Qt.UserRole + 3\n    UnitRole = Qt.UserRole + 4\n    OptionsRole = Qt.UserRole + 5\n    DescRole = Qt.UserRole + 6\n    parametersLoaded = Signal()\n    def __init__(self):\n        super().__init__()",
        "detail": "Python.backend.parameter_model",
        "documentation": {}
    },
    {
        "label": "SensorViewModel",
        "kind": 6,
        "importPath": "Python.backend.sensorviewmodel",
        "description": "Python.backend.sensorviewmodel",
        "peekOfCode": "class SensorViewModel(QAbstractListModel):\n    NameRole = Qt.UserRole + 1\n    ValueRole = Qt.UserRole + 2\n    UnitRole = Qt.UserRole + 3\n    IdRole = Qt.UserRole + 4\n    def __init__(self):\n        super().__init__()\n        self._sensors = []\n    def roleNames(self):\n        return {",
        "detail": "Python.backend.sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "SensorManager",
        "kind": 6,
        "importPath": "Python.backend.sensor_manager",
        "description": "Python.backend.sensor_manager",
        "peekOfCode": "class SensorManager(QObject):\n    \"\"\"Manages sensor data and updates\"\"\"\n    # Signals\n    sensorUpdated = Signal(str, float)  # Emits sensor name and value\n    errorOccurred = Signal(str)  # Emits error message\n    def __init__(self, sensor_model: SensorViewModel, logger: Logger):\n        super().__init__()\n        self._sensor_model = sensor_model\n        self._logger = logger\n    @Slot(object)",
        "detail": "Python.backend.sensor_manager",
        "documentation": {}
    },
    {
        "label": "SerialConnector",
        "kind": 6,
        "importPath": "Python.backend.serial_connector",
        "description": "Python.backend.serial_connector",
        "peekOfCode": "class SerialConnector(QObject):\n    \"\"\"\n    Manages the serial connection to the drone and coordinates sensor data transmission.\n    Signals:\n        available_ports_changed: Emitted when available ports change\n        connection_successful: Emitted on successful connection\n        gps_msg: Emits GPS data\n        attitude_msg: Emits attitude data\n    \"\"\"\n    availablePortsChanged = Signal(list)",
        "detail": "Python.backend.serial_connector",
        "documentation": {}
    },
    {
        "label": "os.environ[\"QT_QUICK_CONTROLS_STYLE\"]",
        "kind": 5,
        "importPath": "Python.backend.serial_connector",
        "description": "Python.backend.serial_connector",
        "peekOfCode": "os.environ[\"QT_QUICK_CONTROLS_STYLE\"] = \"Fusion\"\nclass SerialConnector(QObject):\n    \"\"\"\n    Manages the serial connection to the drone and coordinates sensor data transmission.\n    Signals:\n        available_ports_changed: Emitted when available ports change\n        connection_successful: Emitted on successful connection\n        gps_msg: Emits GPS data\n        attitude_msg: Emits attitude data\n    \"\"\"",
        "detail": "Python.backend.serial_connector",
        "documentation": {}
    },
    {
        "label": "DroneState",
        "kind": 6,
        "importPath": "Python.backend.simulated_drone",
        "description": "Python.backend.simulated_drone",
        "peekOfCode": "class DroneState:\n    \"\"\"Represents the current state of the drone.\"\"\"\n    lat: float = 51.1657  # Start position in Germany\n    lon: float = 10.4515\n    alt: float = 0.0\n    roll: float = 0.0\n    pitch: float = 0.0\n    yaw: float = 0.0\n    groundspeed: float = 0.0\n    airspeed: float = 0.0",
        "detail": "Python.backend.simulated_drone",
        "documentation": {}
    },
    {
        "label": "SimulatedDrone",
        "kind": 6,
        "importPath": "Python.backend.simulated_drone",
        "description": "Python.backend.simulated_drone",
        "peekOfCode": "class SimulatedDrone:\n    def __init__(self, port='udpin:localhost:14550'):\n        self.port = port\n        self.mavlink_connection = None\n        self.state = DroneState()\n        self.target_position: Optional[Tuple[float, float, float]] = None\n        self.simulation_running = False\n        self.simulation_thread: Optional[threading.Thread] = None\n        self.last_update_time = time.time()\n        # Drone parameters",
        "detail": "Python.backend.simulated_drone",
        "documentation": {}
    },
    {
        "label": "SimulatedMAVLink",
        "kind": 6,
        "importPath": "Python.backend.simulated_mavlink",
        "description": "Python.backend.simulated_mavlink",
        "peekOfCode": "class SimulatedMAVLink:\n    def __init__(self):\n        self.drone = SimulatedDrone()\n        self.connected = False\n        self.heartbeat_interval = 1.0  # seconds\n        self.sensor_interval = 0.1     # seconds\n        self._stop_event = threading.Event()\n        self._thread: Optional[threading.Thread] = None\n        self._message_handlers: Dict[str, Callable] = {}\n    def connect(self, connection_string: str = \"simulator://\") -> bool:",
        "detail": "Python.backend.simulated_mavlink",
        "documentation": {}
    },
    {
        "label": "TestMavlinkConnector",
        "kind": 6,
        "importPath": "Python.tests.test_connection",
        "description": "Python.tests.test_connection",
        "peekOfCode": "class TestMavlinkConnector:\n    @pytest.fixture\n    def connector(self):\n        return MavlinkConnector()\n    def test_connection_timeout(self, connector):\n        \"\"\"Test that connection times out when port is invalid\"\"\"\n        with pytest.raises(ConnectionTimeoutError):\n            connector.connect(\"COM99\", timeout=1)\n    def test_connection_invalid_port(self, connector):\n        \"\"\"Test that connection fails with invalid port\"\"\"",
        "detail": "Python.tests.test_connection",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def model():\n    \"\"\"Fixture für ein frisches SensorViewModel für jeden Test.\"\"\"\n    return SensorViewModel()\ndef test_initial_sensor_count(model):\n    \"\"\"Test, dass die initiale Anzahl der Sensoren korrekt ist.\"\"\"\n    assert model.rowCount() == 13  # Anzahl der vordefinierten Sensoren\ndef test_sensor_roles(model):\n    \"\"\"Test, dass alle Rollen korrekt definiert sind.\"\"\"\n    roles = model.roleNames()\n    assert roles[model.NameRole] == b\"name\"",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_initial_sensor_count",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_initial_sensor_count(model):\n    \"\"\"Test, dass die initiale Anzahl der Sensoren korrekt ist.\"\"\"\n    assert model.rowCount() == 13  # Anzahl der vordefinierten Sensoren\ndef test_sensor_roles(model):\n    \"\"\"Test, dass alle Rollen korrekt definiert sind.\"\"\"\n    roles = model.roleNames()\n    assert roles[model.NameRole] == b\"name\"\n    assert roles[model.ValueRole] == b\"value\"\n    assert roles[model.FormattedValueRole] == b\"formattedValue\"\ndef test_sensor_data_access(model):",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_sensor_roles",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_sensor_roles(model):\n    \"\"\"Test, dass alle Rollen korrekt definiert sind.\"\"\"\n    roles = model.roleNames()\n    assert roles[model.NameRole] == b\"name\"\n    assert roles[model.ValueRole] == b\"value\"\n    assert roles[model.FormattedValueRole] == b\"formattedValue\"\ndef test_sensor_data_access(model):\n    \"\"\"Test des Zugriffs auf Sensordaten.\"\"\"\n    index = model.index(0)  # Erster Sensor (Roll)\n    # Test Sensor Name",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_sensor_data_access",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_sensor_data_access(model):\n    \"\"\"Test des Zugriffs auf Sensordaten.\"\"\"\n    index = model.index(0)  # Erster Sensor (Roll)\n    # Test Sensor Name\n    name = model.data(index, model.NameRole)\n    assert name == \"Roll\"\n    # Test Sensor Value\n    value = model.data(index, model.ValueRole)\n    assert value == 0.0\n    # Test Formatted Value",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_update_sensor",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_update_sensor(model):\n    \"\"\"Test der Sensor-Aktualisierung.\"\"\"\n    model.update_sensor(\"Roll\", 45.123)\n    index = model.index(0)\n    value = model.data(index, model.ValueRole)\n    formatted = model.data(index, model.FormattedValueRole)\n    assert value == 45.123\n    assert formatted == \"45.12\"\ndef test_invalid_sensor_update(model):\n    \"\"\"Test, dass eine Exception bei ungültigem Sensor geworfen wird.\"\"\"",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_invalid_sensor_update",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_invalid_sensor_update(model):\n    \"\"\"Test, dass eine Exception bei ungültigem Sensor geworfen wird.\"\"\"\n    with pytest.raises(SensorException):\n        model.update_sensor(\"NonExistentSensor\", 0.0)\ndef test_invalid_index(model):\n    \"\"\"Test des Verhaltens bei ungültigem Index.\"\"\"\n    invalid_index = model.index(999)  # Index außerhalb des gültigen Bereichs\n    assert model.data(invalid_index, model.NameRole) is None\ndef test_formatted_value_with_invalid_data(model):\n    \"\"\"Test der Formatierung bei ungültigen Daten.\"\"\"",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_invalid_index",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_invalid_index(model):\n    \"\"\"Test des Verhaltens bei ungültigem Index.\"\"\"\n    invalid_index = model.index(999)  # Index außerhalb des gültigen Bereichs\n    assert model.data(invalid_index, model.NameRole) is None\ndef test_formatted_value_with_invalid_data(model):\n    \"\"\"Test der Formatierung bei ungültigen Daten.\"\"\"\n    # Simuliere ungültige Daten (würde in der Praxis nicht vorkommen)\n    model._sensors[0][\"value\"] = \"invalid\"\n    index = model.index(0)\n    formatted = model.data(index, model.FormattedValueRole)",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "test_formatted_value_with_invalid_data",
        "kind": 2,
        "importPath": "Python.tests.test_sensorviewmodel",
        "description": "Python.tests.test_sensorviewmodel",
        "peekOfCode": "def test_formatted_value_with_invalid_data(model):\n    \"\"\"Test der Formatierung bei ungültigen Daten.\"\"\"\n    # Simuliere ungültige Daten (würde in der Praxis nicht vorkommen)\n    model._sensors[0][\"value\"] = \"invalid\"\n    index = model.index(0)\n    formatted = model.data(index, model.FormattedValueRole)\n    assert formatted == \"—\"  # Erwartetes Verhalten bei Formatierungsfehler",
        "detail": "Python.tests.test_sensorviewmodel",
        "documentation": {}
    },
    {
        "label": "drone",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def drone():\n    \"\"\"Fixture für die SimulatedDrone.\"\"\"\n    drone = SimulatedDrone(port='udpin:localhost:14550')\n    drone.connect()\n    drone.start_simulation()\n    yield drone\n    drone.stop_simulation()\n    drone.close()\ndef test_drone_initialization(drone):\n    \"\"\"Test, dass die Drone korrekt initialisiert wird.\"\"\"",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_drone_initialization",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_drone_initialization(drone):\n    \"\"\"Test, dass die Drone korrekt initialisiert wird.\"\"\"\n    assert drone.state.lat == 0.0\n    assert drone.state.lon == 0.0\n    assert drone.state.alt == 0.0\n    assert drone.state.battery_remaining == 100.0\n    assert not drone.state.armed\ndef test_drone_movement(drone):\n    \"\"\"Test, dass die Drone sich korrekt bewegt.\"\"\"\n    # Setze Zielposition",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_drone_movement",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_drone_movement(drone):\n    \"\"\"Test, dass die Drone sich korrekt bewegt.\"\"\"\n    # Setze Zielposition\n    target_lat = 51.1657\n    target_lon = 10.4515\n    target_alt = 100.0\n    drone.set_target_position(target_lat, target_lon, target_alt)\n    # Warte kurz, damit sich die Drone bewegen kann\n    time.sleep(2)\n    # Überprüfe, ob sich die Position geändert hat",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_battery_drain",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_battery_drain(drone):\n    \"\"\"Test, dass der Batteriestand realistisch abnimmt.\"\"\"\n    initial_battery = drone.state.battery_remaining\n    # Setze Zielposition und warte\n    drone.set_target_position(51.1657, 10.4515, 100.0)\n    time.sleep(2)\n    # Überprüfe, ob der Batteriestand abgenommen hat\n    assert drone.state.battery_remaining < initial_battery\n    assert drone.state.voltage < 12.0\n    assert drone.state.current > 0.0",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_flight_modes",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_flight_modes(drone):\n    \"\"\"Test, dass die Flugmodi korrekt funktionieren.\"\"\"\n    # Teste verschiedene Flugmodi\n    modes = [\"STABILIZE\", \"ALTHOLD\", \"LOITER\", \"RTL\"]\n    for mode in modes:\n        drone.set_mode(mode)\n        assert drone.state.mode == mode\ndef test_arming(drone):\n    \"\"\"Test, dass das Arming/Disarming korrekt funktioniert.\"\"\"\n    assert not drone.state.armed",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_arming",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_arming(drone):\n    \"\"\"Test, dass das Arming/Disarming korrekt funktioniert.\"\"\"\n    assert not drone.state.armed\n    drone.arm()\n    assert drone.state.armed\n    drone.disarm()\n    assert not drone.state.armed\ndef test_max_altitude(drone):\n    \"\"\"Test, dass die maximale Höhe eingehalten wird.\"\"\"\n    # Versuche, über die maximale Höhe zu fliegen",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_max_altitude",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_max_altitude(drone):\n    \"\"\"Test, dass die maximale Höhe eingehalten wird.\"\"\"\n    # Versuche, über die maximale Höhe zu fliegen\n    drone.set_target_position(51.1657, 10.4515, 200.0)  # Höher als max_altitude\n    time.sleep(1)\n    # Überprüfe, ob die Höhe auf max_altitude begrenzt wurde\n    assert drone.state.alt <= drone.max_altitude\ndef test_send_heartbeat(drone):\n    \"\"\"Test, dass der Heartbeat korrekt gesendet wird.\"\"\"\n    drone.send_heartbeat()",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_heartbeat",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_heartbeat(drone):\n    \"\"\"Test, dass der Heartbeat korrekt gesendet wird.\"\"\"\n    drone.send_heartbeat()\n    # Hier könnten weitere Assertions hinzugefügt werden, um zu überprüfen, ob der Heartbeat empfangen wurde.\ndef test_send_global_position_int(drone):\n    \"\"\"Test, dass die globale Position korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für die globale Position\n    drone.send_global_position_int(510000000, 10000000, 1000)\ndef test_send_attitude(drone):\n    \"\"\"Test, dass die Attitude korrekt gesendet wird.\"\"\"",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_global_position_int",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_global_position_int(drone):\n    \"\"\"Test, dass die globale Position korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für die globale Position\n    drone.send_global_position_int(510000000, 10000000, 1000)\ndef test_send_attitude(drone):\n    \"\"\"Test, dass die Attitude korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für die Attitude\n    drone.send_attitude(0.1, 0.2, 0.3)\ndef test_send_sys_status(drone):\n    \"\"\"Test, dass der Systemstatus korrekt gesendet wird.\"\"\"",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_attitude",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_attitude(drone):\n    \"\"\"Test, dass die Attitude korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für die Attitude\n    drone.send_attitude(0.1, 0.2, 0.3)\ndef test_send_sys_status(drone):\n    \"\"\"Test, dass der Systemstatus korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für den Systemstatus\n    drone.send_sys_status(12000, 100, 80)\ndef test_send_vfr_hud(drone):\n    \"\"\"Test, dass die VFR HUD-Daten korrekt gesendet werden.\"\"\"",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_sys_status",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_sys_status(drone):\n    \"\"\"Test, dass der Systemstatus korrekt gesendet wird.\"\"\"\n    # Korrekte Werte für den Systemstatus\n    drone.send_sys_status(12000, 100, 80)\ndef test_send_vfr_hud(drone):\n    \"\"\"Test, dass die VFR HUD-Daten korrekt gesendet werden.\"\"\"\n    drone.send_vfr_hud(100, 10, 12, 90, 50, 1)\n    # Hier könnten weitere Assertions hinzugefügt werden, um zu überprüfen, ob die VFR HUD-Daten empfangen wurden.\ndef test_send_statustext(drone):\n    \"\"\"Test, dass der Statustext korrekt gesendet wird.\"\"\"",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_vfr_hud",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_vfr_hud(drone):\n    \"\"\"Test, dass die VFR HUD-Daten korrekt gesendet werden.\"\"\"\n    drone.send_vfr_hud(100, 10, 12, 90, 50, 1)\n    # Hier könnten weitere Assertions hinzugefügt werden, um zu überprüfen, ob die VFR HUD-Daten empfangen wurden.\ndef test_send_statustext(drone):\n    \"\"\"Test, dass der Statustext korrekt gesendet wird.\"\"\"\n    drone.send_statustext(3, \"Test status\")\n    # Hier könnten weitere Assertions hinzugefügt werden, um zu überprüfen, ob der Statustext empfangen wurde.",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "test_send_statustext",
        "kind": 2,
        "importPath": "Python.tests.test_simulated_drone",
        "description": "Python.tests.test_simulated_drone",
        "peekOfCode": "def test_send_statustext(drone):\n    \"\"\"Test, dass der Statustext korrekt gesendet wird.\"\"\"\n    drone.send_statustext(3, \"Test status\")\n    # Hier könnten weitere Assertions hinzugefügt werden, um zu überprüfen, ob der Statustext empfangen wurde.",
        "detail": "Python.tests.test_simulated_drone",
        "documentation": {}
    },
    {
        "label": "DroneController",
        "kind": 6,
        "importPath": "Python.connect_to_simulated_drone",
        "description": "Python.connect_to_simulated_drone",
        "peekOfCode": "class DroneController:\n    def __init__(self):\n        self.connector = None\n        self.app = QCoreApplication(sys.argv)\n    def on_gps_update(self, lat, lon):\n        print(f\"GPS Update: {lat:.6f}, {lon:.6f}\")\n    def on_attitude_update(self, roll, pitch, yaw):\n        print(f\"Attitude Update: Roll={roll:.1f}°, Pitch={pitch:.1f}°, Yaw={yaw:.1f}°\")\n    def on_sensor_update(self, sensor_name, value):\n        print(f\"Sensor Update: {sensor_name} = {value}\")",
        "detail": "Python.connect_to_simulated_drone",
        "documentation": {}
    },
    {
        "label": "Backend",
        "kind": 6,
        "importPath": "Python.main",
        "description": "Python.main",
        "peekOfCode": "class Backend(QObject):\n    def __init__(self):\n        super().__init__()\n        self.logger = Logger()\n        self.sensor_model = SensorViewModel()\n        self.parameter_model = ParameterTableModel()\n        self.serial_connector = SerialConnector(self.sensor_model, self.logger, self.parameter_model)\ndef main():\n    app = QGuiApplication(sys.argv)\n    # Create backend",
        "detail": "Python.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Python.main",
        "description": "Python.main",
        "peekOfCode": "def main():\n    app = QGuiApplication(sys.argv)\n    # Create backend\n    backend = Backend()\n    # Create QML engine\n    engine = QQmlApplicationEngine()\n    # Expose Python objects to QML\n    engine.rootContext().setContextProperty(\"logger\", backend.logger)\n    engine.rootContext().setContextProperty(\"serialConnector\", backend.serial_connector)\n    engine.rootContext().setContextProperty(\"sensorModel\", backend.sensor_model)",
        "detail": "Python.main",
        "documentation": {}
    },
    {
        "label": "DroneService",
        "kind": 6,
        "importPath": "Python.run_simulated_drone",
        "description": "Python.run_simulated_drone",
        "peekOfCode": "class DroneService:\n    def __init__(self):\n        self.drone = None\n        self.running = True\n        # Signal handler für sauberes Beenden\n        signal.signal(signal.SIGINT, self.signal_handler)\n        signal.signal(signal.SIGTERM, self.signal_handler)\n    def signal_handler(self, signum, frame):\n        \"\"\"Behandelt Signale für sauberes Beenden.\"\"\"\n        print(\"\\nBeende Drone-Service...\")",
        "detail": "Python.run_simulated_drone",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Python.start_drone",
        "description": "Python.start_drone",
        "peekOfCode": "def main():\n    # Drone initialisieren\n    print(\"Initialisiere Drone...\")\n    drone = SimulatedDrone(port='udpin:localhost:14550')\n    drone.connect()\n    # Simulation starten\n    print(\"Starte Simulation...\")\n    drone.start_simulation()\n    # Drone armen\n    print(\"Arme Drone...\")",
        "detail": "Python.start_drone",
        "documentation": {}
    }
]