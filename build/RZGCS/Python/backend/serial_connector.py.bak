# backend/serial_connector.py

import sys
import os
from PySide6.QtCore import QObject, Signal, Slot, Property, QTimer
import serial.tools.list_ports
import math
from PySide6.QtSerialPort import QSerialPort, QSerialPortInfo
from pymavlink import mavutil
import time
import threading
import asyncio

from backend.mavlink_connector import MAVLinkConnector
from backend.sensorviewmodel import SensorViewModel
from backend.logger import Logger
from backend.parameter_model import ParameterTableModel
from backend.message_handler import MessageHandler
from backend.sensor_manager import SensorManager
from backend.parameter_manager import ParameterManager
from backend.simulator_connector import SimulatorConnector

os.environ["QT_QUICK_CONTROLS_STYLE"] = "Fusion"

class SerialConnector(QObject):
    """
    Manages the serial connection to the drone and coordinates sensor data transmission.
    
    Signals:
        available_ports_changed: Emitted when available ports change
        connection_successful: Emitted on successful connection
        gps_msg: Emits GPS data
        attitude_msg: Emits attitude data
    """
    
    availablePortsChanged = Signal(list)
    connection_successful = Signal()
    gps_msg = Signal(float, float)
    attitude_msg = Signal(float, float, float)
    connectedChanged = Signal(bool)
    portChanged = Signal(str)
    baudRateChanged = Signal(int)
    errorOccurred = Signal(str)
    availableBaudRatesChanged = Signal(list)
    attitudeChanged = Signal(float, float, float)  # roll, pitch, yaw
    gpsChanged = Signal(float, float, float)  # lat, lon, alt
    batteryChanged = Signal(float, float, float)  # voltage, current, remaining
    statusTextReceived = Signal(str)  # status text messages

    def __init__(self, sensor_model: SensorViewModel, logger: Logger, parameter_model=None):
        """
        Initialize the SerialConnector.
        
        Args:
            sensor_model: Model for sensor data
            logger: Logger for status messages
            parameter_model: Model for parameter data
        """
        super().__init__()
        self._sensor_model = sensor_model
        self._logger = logger
        self._connected = False
        self._port = ""
        self._baud_rate = 115200
        self._available_ports = []
        self._available_baud_rates = [9600, 19200, 38400, 57600, 115200]
        self._mavlink_connection = None
        self._timer = None
        self._simulator_connector = None
        
        # Initialize managers
        self._message_handler = MessageHandler(logger)
        self._sensor_manager = SensorManager(sensor_model, logger)
        self._parameter_manager = ParameterManager(parameter_model, logger)
        
        # Connect signals
        self._message_handler.attitude_received.connect(self._sensor_manager.handle_attitude)
        self._message_handler.gps_received.connect(self._sensor_manager.handle_gps)
        self._message_handler.battery_received.connect(self._sensor_manager.handle_battery)
        self._message_handler.parameter_received.connect(self._parameter_manager.handle_parameter)

    @Property(bool, notify=connectedChanged)
    def connected(self):
        """True if currently connected to a drone/simulator."""
        return self._connected

    @Property(str, notify=portChanged)
    def port(self):
        return self._port

    @Property(int, notify=baudRateChanged)
    def baudRate(self):
        return self._baud_rate

    @Property('QVariantList', notify=availablePortsChanged)
    def availablePorts(self):
        return self._available_ports

    @Property('QVariantList', notify=availableBaudRatesChanged)
    def availableBaudRates(self):
        return self._available_baud_rates

    @Slot()
    def load_ports(self):
        try:
            ports = QSerialPortInfo.availablePorts()
            port_names = ["Simulator"]  # Add Simulator as first option
            port_names.extend([port.portName() for port in ports])
            if len(port_names) == 1:  # Only Simulator available
                self._logger.addLog("No serial ports found, only Simulator available")
            self._available_ports = port_names
            self.availablePortsChanged.emit(self._available_ports)
            self._logger.addLog(f"Available ports: {self._available_ports}")
        except Exception as e:
            self._logger.addLog(f"Error loading ports: {str(e)}")

    @Slot(str)
    def setPort(self, port):
        if self._port != port:
            self._port = port
            self.portChanged.emit(port)

    @Slot(int)
    def setBaudRate(self, baud_rate):
        if self._baud_rate != baud_rate:
            self._baud_rate = baud_rate
            self.baudRateChanged.emit(baud_rate)

    @Slot()
    def connect(self):
        if not self._port:
            self.errorOccurred.emit("No port selected")
            self._logger.addLog("‚ùå No port selected")
            return

        if self._connected:
            self.disconnect()

        try:
            self._logger.addLog(f"üîÑ Attempting to connect to {self._port}...")
            
            # Create connection based on port type
            if self._port == "Simulator":
                # For simulator, use the specialized SimulatorConnector
                if self._simulator_connector is None:
                    self._simulator_connector = SimulatorConnector(self._logger)
                
                # Connect to simulator first
                if not self._simulator_connector.start_connection():
                    raise ConnectionError("Failed to connect to simulator")
                    
                # Now connect signals after successful connection
                self._simulator_connector.connectionStatusChanged.connect(self._on_simulator_connection_changed)
                self._simulator_connector.messageReceived.connect(self._on_simulator_message)
                self._simulator_connector.errorOccurred.connect(self._on_simulator_error)
                    
                # Die Verbindung zum Simulator ist jetzt hergestellt
                self._connected = True
                self.connectedChanged.emit(True)
                # Kein _mavlink_connection n√∂tig, alles l√§uft √ºber den SimulatorConnector
                self._mavlink_connection = None
                self._logger.addLog(f"‚úÖ Connected to {self._port}") 
                # Fertig - fr√ºh beenden
                return
            else:    
                # F√ºr normale Verbindungen (nicht Simulator)
                try:
                    # Initialisiere normale Verbindung
                    self._mavlink_connection = mavutil.mavlink_connection(self._port, self._baud_rate)
                    
                    # Set connection in managers
                    self._message_handler.set_connection(self._mavlink_connection, is_simulator=False)
                    self._parameter_manager.set_connection(self._mavlink_connection)
                    
                    # Initialize sensors
                    self._sensor_manager.initialize_sensors()
                    
                    # Wait for heartbeat
                    self._logger.addLog("‚åõ Waiting for heartbeat...")
                    try:
                        self._mavlink_connection.wait_heartbeat(timeout=10)
                        self._logger.addLog("üíì Heartbeat received!")
                    except Exception as e:
                        error_msg = f"‚ùå Error waiting for heartbeat: {str(e)}"
                        self._logger.addLog(error_msg)
                        self.errorOccurred.emit(error_msg)
                        raise
                    
                    # Start message handling
                    if not self._message_handler.start():
                        raise ConnectionError("Failed to start message handler")
                        
                    # Request data streams
                    self._message_handler.request_data_streams()
                    
                    # Start message handling timer
                    self._timer = QTimer(self)
                    self._timer.timeout.connect(self._message_handler.process_messages)
                    self._timer.start(100)  # 100ms interval
                    self._logger.addLog("‚è±Ô∏è Message handling timer started")

                    # Erfolgreiche Verbindung
                    self._connected = True
                    self.connectedChanged.emit(True)
                    self._logger.addLog(f"‚úÖ Connected to {self._port}")
                except Exception as e:
                    error_msg = f"‚ùå Failed to connect to port {self._port}: {str(e)}"
                    self.errorOccurred.emit(error_msg)
                    self._logger.addLog(error_msg)
                    if self._mavlink_connection:
                        try:
                            self._mavlink_connection.stop()
                        except:
                            pass
                        self._mavlink_connection = None
                    raise
            
        except Exception as e:
            error_msg = f"‚ùå Connection failed: {str(e)}"
            self.errorOccurred.emit(error_msg)
            self._logger.addLog(error_msg)
            self._connected = False
            self.connectedChanged.emit(False)
            
        except Exception as e:
            error_msg = f"‚ùå Failed to connect: {str(e)}"
            self.errorOccurred.emit(error_msg)
            self._logger.addLog(error_msg)
            self._connected = False
            self.connectedChanged.emit(False)
            if self._mavlink_connection:
                try:
                    self._mavlink_connection.stop()
                except:
                    pass
                self._mavlink_connection = None
            
            # Wait for heartbeat
            self._logger.addLog("‚åõ Waiting for heartbeat...")
            self._mavlink_connection.wait_heartbeat(timeout=10)
            self._logger.addLog("üíì Heartbeat received!")

            # Start message handling
            if not self._message_handler.start():
                raise ConnectionError("Failed to start message handler")
                
            # Request data streams
            self._message_handler.request_data_streams()

            # Start message handling timer
            self._timer = QTimer(self)
            self._timer.timeout.connect(self._message_handler.process_messages)
            self._timer.start(100)  # 100ms interval
            self._logger.addLog("‚è±Ô∏è Message handling timer started")

            # For simulator, start sending simulated data
            if self._port == "Simulator":
                self._simulator_timer = QTimer(self)
                self._simulator_timer.timeout.connect(self._message_handler._send_simulated_data)
                self._simulator_timer.start(100)  # Send simulated data every 100ms
                self._logger.addLog("üöÄ Simulated data transmission started")

            self._connected = True
            self.connectedChanged.emit(True)
            self._logger.addLog(f"‚úÖ Connected to {self._port}")
            
        except Exception as e:
            error_msg = f"‚ùå Failed to connect: {str(e)}"
            self.errorOccurred.emit(error_msg)
            self._logger.addLog(error_msg)
            self._connected = False
            self.connectedChanged.emit(False)
            if self._mavlink_connection:
                try:
                    self._mavlink_connection.stop()
                except:
                    pass
                self._mavlink_connection = None

    @Slot()
    def disconnect(self):
        if self._connected:
            try:
                # Stoppe Message-Handler-Timer
                if self._timer:
                    self._timer.stop()
                    self._timer = None
                    
                # Behandle Simulator-Verbindung
                if self._port == "Simulator" and self._simulator_connector is not None:
                    # Trenne Simulator-Verbindung √ºber den spezialisierten Konnektor
                    self._simulator_connector.disconnect()
                    # Der Verbindungsstatus wird √ºber den _on_simulator_connection_changed Handler aktualisiert
                    return
                # Behandle normale Verbindung    
                elif self._mavlink_connection:
                    self._mavlink_connection.close()
                    self._mavlink_connection = None
                    
                # Stoppe Message-Handler
                self._message_handler.stop()
                
                # Aktualisiere Verbindungsstatus
                if self._connected:
                    self._connected = False
                    self.connectedChanged.emit(False)
                    self._logger.addLog(f"Disconnected from {self._port}")
            except Exception as e:
                self._logger.addLog(f"‚ö†Ô∏è Error during disconnect: {str(e)}")
                if self._connected:
                    self._connected = False
                    self.connectedChanged.emit(False)

    @Slot()
    def load_parameters(self):
        """Load parameters from the flight controller"""
        self._parameter_manager.load_parameters()

    def _initialize_sensors(self):
        """Initialize all required sensors in the model."""
        sensors = [
            ("gps_lat", "GPS Latitude", "¬∞"),
            ("gps_lon", "GPS Longitude", "¬∞"),
            ("altitude", "Altitude", "m"),
            ("roll", "Roll", "¬∞"),
            ("pitch", "Pitch", "¬∞"),
            ("yaw", "Yaw", "¬∞"),
            ("airspeed", "Airspeed", "m/s"),
            ("groundspeed", "Ground Speed", "m/s"),
            ("climb", "Climb Rate", "m/s"),
            ("battery_voltage", "Battery Voltage", "V"),
            ("battery_current", "Battery Current", "A"),
            ("battery_remaining", "Battery", "%")
        ]
        
        for sensor_id, name, unit in sensors:
            try:
                self._sensor_model.add_sensor(sensor_id, name, unit)
                # Initialize with default values
                self._sensor_model.update_sensor(sensor_id, 0.0)
            except Exception as e:
                self._logger.addLog(f"‚ö†Ô∏è Error initializing sensor {name}: {str(e)}")

    @Slot(str)
    def add_log(self, message):
        print(f"[SerialConnector] {message}")
        self._logger.info(message)

    @Slot(str, float)
    def update_sensor_data(self, name, value):
        """Update sensor data and ensure frontend update."""
        try:
            self._sensor_model.update_sensor(name, round(value, 2))
            # Force update of the sensor model
            self._sensor_model.dataChanged.emit()
        except Exception as e:
            self._logger.addLog(f"‚ö†Ô∏è Error updating sensor {name}: {str(e)}")
        
    def stop(self):
        if self._connected:
            self.disconnect()

    @Slot(float, float)
    def update_gps(self, lat: float, lon: float):
        """Update GPS coordinates in the sensor model."""
        try:
            self._sensor_model.update_gps(lat, lon)
        except Exception as e:
            self.add_log(f"‚ö†Ô∏è Error updating GPS coordinates: {str(e)}")

    def _log_info(self, message: str) -> None:
        """Loggt eine Informationsnachricht."""
        print(f"[MAVLinkConnector] {message}")
        self.log_received.emit(message)
        
    def _log_error(self, message: str) -> None:
        """Loggt eine Fehlernachricht."""
        print(f"[MAVLinkConnector] ‚ùå {message}")
        self.log_received.emit(f"‚ùå {message}")

    def _handle_global_position_int(self, msg):
        """Handle GLOBAL_POSITION_INT message."""
        try:
            lat = msg.lat / 1e7
            lon = msg.lon / 1e7
            alt = msg.alt / 1000.0  # Convert to meters
            relative_alt = msg.relative_alt / 1000.0  # Convert to meters
            vx = msg.vx / 100.0  # Convert to m/s
            vy = msg.vy / 100.0  # Convert to m/s
            vz = msg.vz / 100.0  # Convert to m/s
            
            # Calculate ground speed
            ground_speed = math.sqrt(vx*vx + vy*vy)
            
            # Update sensor data
            self._sensor_model.update_sensor("altitude", relative_alt)
            self._sensor_model.update_sensor("groundspeed", ground_speed)
            
            # Log GPS status based on altitude and speed
            if alt == 0 and relative_alt == 0:
                self._log_error("No GPS fix")
            elif ground_speed < 0.1:
                self._log_info("GPS fix (stationary)")
            else:
                self._log_info(f"GPS fix (moving: {ground_speed:.1f}m/s)")
            
            # Always emit GPS data for updates
            self.gps_msg.emit(lat, lon)
            
            # Log position changes with more detail
            if hasattr(self, '_last_lat') and hasattr(self, '_last_lon'):
                lat_change = abs(lat - self._last_lat)
                lon_change = abs(lon - self._last_lon)
                if lat_change > 0.00001 or lon_change > 0.00001:  # More sensitive to changes
                    self._log_info(
                        f"GPS: {lat:.6f}, {lon:.6f}\n"
                        f"   Alt: {relative_alt:.1f}m\n"
                        f"   Speed: {ground_speed:.1f}m/s"
                    )
            
            # Store last position
            self._last_lat = lat
            self._last_lon = lon
            
        except Exception as e:
            self._log_error(f"Error processing GPS data: {str(e)}")

    def _handle_heartbeat(self, msg):
        """Handle heartbeat message from simulator"""
        armed = (msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED) != 0
        mode = mavutil.mode_string_v10(msg)
        if not hasattr(self, '_last_mode') or self._last_mode != mode:
            self._logger.addLog(f"‚úàÔ∏è Flight Mode: {mode}")
            self._last_mode = mode
        if not hasattr(self, '_last_armed') or self._last_armed != armed:
            status = "ARMED" if armed else "DISARMED"
            self._logger.addLog(f"üîí System {status}")
            self._last_armed = armed

    def _handle_attitude(self, msg):
        """Handle attitude message from simulator"""
        self.attitudeChanged.emit(msg.roll, msg.pitch, msg.yaw)
        self._sensor_model.update_sensor("roll", round(msg.roll, 2))
        self._sensor_model.update_sensor("pitch", round(msg.pitch, 2))
        self._sensor_model.update_sensor("yaw", round(msg.yaw, 2))

    def _handle_gps(self, msg):
        """Handle GPS message from simulator"""
        lat = msg.lat / 1e7
        lon = msg.lon / 1e7
        alt = msg.relative_alt / 1000.0
        self.gpsChanged.emit(lat, lon, alt)
        self._sensor_model.update_sensor("gps_lat", round(lat, 6))
        self._sensor_model.update_sensor("gps_lon", round(lon, 6))
        self.altitudeChanged.emit(msg.roll, msg.pitch, msg.yaw)
        self._sensor_model.update_sensor("altitude", round(alt, 1))

    def _handle_battery(self, msg):
        """Handle battery message from simulator"""
        voltage = msg.voltage_battery / 1000.0
        current = msg.current_battery / 100.0
        remaining = msg.battery_remaining
        self.batteryChanged.emit(voltage, current, remaining)
        self._sensor_model.update_sensor("battery_voltage", round(voltage, 1))
        self._sensor_model.update_sensor("battery_current", round(current, 1))
        self._sensor_model.update_sensor("battery_remaining", round(remaining, 1))

    def _handle_status_text(self, msg):
        """Handle status text message from simulator"""
        if msg.severity >= 3:  # Only log warnings and errors
            self._logger.addLog(f"‚ö†Ô∏è {msg.text}")

    def _handle_parameter(self, msg):
        """Handle parameter message from simulator"""
        if self.parameter_model:
            self.parameter_model.add_parameter({
                "name": msg.param_id,
                "value": msg.param_value,
                "defaultValue": "",
                "unit": "",
                "options": "",
                "desc": ""
            })
            
    # Event-Handler f√ºr SimulatorConnector
    def _on_simulator_connection_changed(self, connected):
        """Behandelt √Ñnderungen des Verbindungsstatus vom SimulatorConnector"""
        if connected != self._connected:
            self._connected = connected
            self.connectedChanged.emit(connected)
            
            if connected:
                self._logger.addLog(f"‚úÖ Connected to {self._port}")
            else:
                self._logger.addLog(f"Disconnected from {self._port}")
    
    def _on_simulator_message(self, msg):
        """Behandelt eingehende MAVLink-Nachrichten vom SimulatorConnector"""
        # Nachrichtentyp bestimmen und an entsprechende Handler weiterleiten
        msgtype = msg.get_type()
        
        if msgtype == "HEARTBEAT":
            self._handle_heartbeat(msg)
        elif msgtype == "ATTITUDE":
            self._handle_attitude(msg)
        elif msgtype == "GLOBAL_POSITION_INT":
            self._handle_gps(msg)
        elif msgtype == "SYS_STATUS":
            self._handle_battery(msg)
        elif msgtype == "STATUSTEXT":
            self._handle_status_text(msg)
        elif msgtype == "PARAM_VALUE":
            self._handle_parameter(msg)
            
    def _on_simulator_error(self, error_msg):
        """Behandelt Fehlermeldungen vom SimulatorConnector"""
        self.errorOccurred.emit(error_msg)
