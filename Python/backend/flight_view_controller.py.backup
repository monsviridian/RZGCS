"""\nFlightViewController - Controller fu00fcr die 3D-Flight-Ansicht\nVerbindet das QML-UI mit der Kartenansicht und dem Backend\n"""\n\nimport os\nimport sys\nimport subprocess\nimport math\nfrom pathlib import Path\nfrom PySide6.QtCore import QObject, Signal, Slot, Property, QTimer, Qt\nfrom PySide6.QtQml import QQmlApplicationEngine, QQmlComponent, QQmlContext\nfrom PySide6.QtWidgets import QMainWindow, QVBoxLayout, QWidget, QFrame, QApplication, QSizePolicy\nfrom PySide6.QtGui import QPainter, QPen, QBrush, QColor, QFont, QPainterPath\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\nfrom PySide6.QtCore import QUrl\n\nfrom .flight_map_bridge import FlightMapView, FlightMapBridge\n\n# Import fu00fcr native 3D-Karte\nsys.path.append(str(Path(__file__).parent.parent))\nfrom native_map import MapView, DroneData\n\n\n# Vereinfachtes 2D-Karten-Widget fu00fcr die Einbettung\nclass SimpleMapWidget(QWidget):\n    """Einfaches 2D-Kartendarstellung mit Drohnenposition"""\n    \n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setMinimumSize(400, 300)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setStyleSheet("background-color: #1e1e1e;")\n        \n        # Karten-Attribute\n        self.drone_lat = 51.505600  # Standard-Position (Dortmund)\n        self.drone_lon = 7.452400\n        self.drone_alt = 100.0\n        self.drone_heading = 0.0\n        self.drone_speed = 0.0\n        self.drone_battery = 100.0\n        self.drone_path = []\n        self.max_path_length = 100\n        \n        # Kartenansichts-Eigenschaften\n        self.center_lat = self.drone_lat\n        self.center_lon = self.drone_lon\n        self.zoom = 1.0\n        self.show_grid = True\n        self.show_path = True\n        \n    def paintEvent(self, event):\n        """Zeichnet die 2D-Kartenansicht"""\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing)\n        \n        # Hintergrund zeichnen\n        painter.fillRect(self.rect(), QBrush(QColor(30, 30, 30)))\n        \n        # Gitter zeichnen\n        if self.show_grid:\n            self.draw_grid(painter)\n            \n        # Drohnenpfad zeichnen\n        if self.show_path and len(self.drone_path) > 1:\n            self.draw_path(painter)\n            \n        # Drohne zeichnen\n        self.draw_drone(painter)\n        \n        # Info-Panel zeichnen\n        self.draw_info_panel(painter)\n    \n    def update_drone_position(self, lat, lon, alt, heading=0, speed=0, battery=100):\n        """Aktualisiert die Drohnenposition auf der Karte"""\n        self.drone_lat = lat\n        self.drone_lon = lon\n        self.drone_alt = alt\n        self.drone_heading = heading\n        self.drone_speed = speed\n        self.drone_battery = battery\n        \n        # Position zum Pfad hinzufu00fcgen\n        self.drone_path.append((lat, lon, alt))\n        # Pfad beschru00e4nken\n        if len(self.drone_path) > self.max_path_length:\n            self.drone_path = self.drone_path[-self.max_path_length:]\n            \n        # Widget neu zeichnen\n        self.update()\n    \n    def draw_grid(self, painter):\n        """Zeichnet ein einfaches Koordinatengitter"""\n        width, height = self.width(), self.height()\n        \n        # Rasterlinien zeichnen\n        painter.setPen(QPen(QColor(60, 60, 60)))\n        \n        # Horizontale Linien\n        for y in range(0, height, 50):\n            painter.drawLine(0, y, width, y)\n            \n        # Vertikale Linien\n        for x in range(0, width, 50):\n            painter.drawLine(x, 0, x, height)\n    \n    def draw_path(self, painter):\n        """Zeichnet den Drohnenpfad"""\n        painter.setPen(QPen(QColor(255, 255, 0, 150), 2))\n        \n        prev_point = None\n        for lat, lon, _ in self.drone_path:\n            x, y = self.geo_to_screen(lat, lon)\n            if prev_point:\n                painter.drawLine(prev_point[0], prev_point[1], x, y)\n            prev_point = (x, y)\n    \n    def draw_drone(self, painter):\n        """Zeichnet die Drohne"""\n        x, y = self.geo_to_screen(self.drone_lat, self.drone_lon)\n        \n        # Drohne zeichnen\n        painter.setPen(QPen(Qt.white, 2))\n        painter.setBrush(QBrush(QColor(255, 50, 50)))\n        painter.drawEllipse(x - 10, y - 10, 20, 20)\n        \n        # Richtungspfeil zeichnen\n        rad_heading = math.radians(self.drone_heading)\n        arrow_x = x + int(math.sin(rad_heading) * 20)\n        arrow_y = y - int(math.cos(rad_heading) * 20)\n        painter.drawLine(x, y, arrow_x, arrow_y)\n    \n    def draw_info_panel(self, painter):\n        """Zeichnet ein Infopanel mit Drohnendaten"""\n        panel_x, panel_y = 10, 10\n        panel_width, panel_height = 180, 100\n        \n        # Panel-Hintergrund\n        painter.setPen(QPen(QColor(255, 255, 255, 100)))\n        painter.setBrush(QBrush(QColor(0, 0, 0, 150)))\n        painter.drawRect(panel_x, panel_y, panel_width, panel_height)\n        \n        # Informationen anzeigen\n        painter.setPen(Qt.white)\n        font = painter.font()\n        font.setPointSize(9)\n        painter.setFont(font)\n        \n        texts = [\n            f"Lat: {self.drone_lat:.6f}",\n            f"Lon: {self.drone_lon:.6f}",\n            f"Alt: {self.drone_alt:.1f} m",\n            f"Speed: {self.drone_speed:.1f} m/s",\n            f"Battery: {self.drone_battery:.0f}%"\n        ]\n        \n        for i, text in enumerate(texts):\n            painter.drawText(panel_x + 10, panel_y + 20 + i * 15, text)\n    \n    def geo_to_screen(self, lat, lon):\n        """Konvertiert geografische in Bildschirmkoordinaten"""\n        # Einfache lineare Umrechnung fu00fcr Demonstrationszwecke\n        scale = 10000 * self.zoom  # Skalierungsfaktor\n        \n        # Berechne relative Position\n        x = (lon - self.center_lon) * scale\n        y = (self.center_lat - lat) * scale  # Y-Achse umkehren\n        \n        # Verschiebe zum Mittelpunkt\n        screen_x = self.width() / 2 + x\n        screen_y = self.height() / 2 + y\n        \n        return int(screen_x), int(screen_y)\n\n\n# Eigenstu00e4ndiges Fenster fu00fcr die 3D-Karte, falls extern geu00f6ffnet werden soll\nclass MapWindow(QMainWindow):\n    """Eigenstu00e4ndiges Fenster fu00fcr eine externe 3D-Kartenansicht"""\n    \n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle("RZGCS - 3D Map")\n        self.resize(800, 600)\n        \n        # Zentrales Widget\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n        \n        # Layout\n        layout = QVBoxLayout(central_widget)\n        layout.setContentsMargins(0, 0, 0, 0)\n        layout.setSpacing(0)\n        \n        # Status-Frame\n        status_frame = QFrame()\n        status_frame.setFrameShape(QFrame.StyledPanel)\n        status_frame.setStyleSheet("QFrame { background-color: #333333; color: white; }")\n        status_layout = QVBoxLayout(status_frame)\n        \n        # Status-Text\n        self.status_text = QLabel("Bereit")\n        status_layout.addWidget(self.status_text)\n        \n        # WebView fu00fcr Cesium\n        self.web_view = QWebEngineView()\n        \n        # Webview und Status zum Layout hinzufu00fcgen\n        layout.addWidget(self.web_view, 1)  # Webview nimmt den Gro√üteil ein\n        layout.addWidget(status_frame, 0)  # Status-Frame nimmt minimalen Platz ein\n    \n    def load_map(self, html_path):\n        """Lu00e4dt die Cesium-Karte aus der lokalen HTML-Datei"""\n        try:\n            # Pru00fcfen, ob die Datei existiert\n            if not os.path.exists(html_path):\n                self.status_text.setText(f"Fehler: Karte nicht gefunden: {html_path}")\n                return False\n            \n            # Absolute URL erstellen und laden\n            file_url = QUrl.fromLocalFile(html_path)\n            print(f"Lade URL: {file_url.toString()}")\n            self.web_view.load(file_url)\n            self.status_text.setText(f"Karte geladen: {html_path}")\n            return True\n        except Exception as e:\n            self.status_text.setText(f"Fehler beim Laden der Karte: {str(e)}")\n            return False\n\n\nclass FlightViewController(QObject):\n    """Controller fu00fcr die Flight-View und die 3D-Kartenansicht"""\n    \n    # Signal fu00fcr Positionsu00e4nderungen\n    dronePositionChanged = Signal()\n    \n    # Signal fu00fcr die Kartenumschaltung\n    mapTypeChanged = Signal(int)  # 0 = 2D-Ansicht, 1 = 3D-Ansicht\n    \n    def __init__(self, engine, parent=None):\n        super().__init__(parent)\n        self.engine = engine\n        self.map_window = None  # Externes Fenster\n        self.map_widget = None  # Eingebettetes Widget\n        \n        # Drohnenstatus\n        self._drone_lat = 51.5056  # Standardwerte Dortmund\n        self._drone_lon = 7.4524\n        self._drone_alt = 100.0\n        self._drone_speed = 0.0\n        self._drone_battery = 100.0\n        \n        # Karten-Modus (0 = 2D-Ansicht, 1 = 3D-Ansicht)\n        self._map_type = 1  # Standard: 3D-Ansicht\n        \n        # Timer fu00fcr Simulationszwecke (spu00e4ter entfernen)\n        self.sim_timer = QTimer(self)\n        self.sim_timer.setInterval(1000)  # 1 Sekunde\n        self.sim_timer.timeout.connect(self.simulate_drone_movement)\n        \n        # Simulierte Wegpunkte fu00fcr Test (spu00e4ter entfernen)\n        self.sim_points = []\n        self.sim_index = 0\n        \n        # Simulierten Flugpfad erstellen\n        self.create_sim_flight_path()\n    \n    def initialize(self, root_item):\n        """Initialisiert die Flight-View und verbindet sie mit dem QML-UI."""\n        try:\n            # Finde das map3DContainer Item im QML\n            flight_view = root_item.findChild(QObject, "flightView")\n            map_container = None\n            \n            if flight_view:\n                print("[INFO] FlightView gefunden")\n                map_container = flight_view.findChild(QObject, "map3DContainer")\n                \n                # Signal fu00fcr Kartentyp-u00c4nderung verbinden\n                if hasattr(flight_view, "mapTypeChanged"):\n                    flight_view.mapTypeChanged.connect(self.set_map_type)\n                    print("[INFO] MapType-Changed-Signal verbunden")\n                \n                # Signal zum u00d6ffnen der externen 3D-Karte verbinden\n                if hasattr(flight_view, "openExternalMap"):\n                    flight_view.openExternalMap.connect(self.open_external_map)\n                    print("[INFO] Open-External-Map-Signal verbunden")\n            \n            if map_container:\n                print("[INFO] Map3DContainer gefunden, erstelle vereinfachte 2D-Karte")\n                \n                # Erstelle das vereinfachte Karten-Widget\n                self.map_widget = SimpleMapWidget()\n                \n                # Erhalte den Win-ID zum Einbetten in QML - sehr wichtig fu00fcr die Einbettung!\n                win_id = int(self.map_widget.winId())  # Explizite Umwandlung in Integer fu00fcr QML\n                print(f"[DEBUG] Win-ID fu00fcr 2D-Karte: {win_id}")\n                \n                # Teile die Win-ID dem QML-Container mit, damit das Widget korrekt eingebettet wird\n                if hasattr(map_container, "setNativeWindowId"):\n                    # Rufe die QML-Funktion auf, um den nativen Container einzubetten\n                    map_container.setNativeWindowId(win_id)\n                    print("[INFO] Karte erfolgreich in QML eingebettet")\n                    \n                    # Aktiviere das Widget sofort, damit es sichtbar wird\n                    self.map_widget.show()\n                    self.map_widget.setFocus()\n                    \n                    # Initialisiere Karte mit aktuellen Drohnendaten\n                    lat, lon = self._drone_lat, self._drone_lon\n                    self.update_drone_position(lat, lon, self._drone_alt, 0, self._drone_speed, self._drone_battery)\n                else:\n                    print("[FEHLER] Container hat keine setNativeWindowId-Methode")\n            else:\n                print("[WARNUNG] Map3DContainer nicht gefunden, Karte kann nicht eingebettet werden")\n                \n            # Simulation starten\n            self.sim_timer.start()\n            \n            print("[INFO] FlightViewController erfolgreich initialisiert")\n            return True\n        except Exception as e:\n            print(f"[FEHLER] Bei der Initialisierung des FlightViewController: {str(e)}")\n            return False\n    \n    def create_sim_flight_path(self):\n        """Erstellt einen simulierten Flugpfad fu00fcr Testzwecke."""\n        # Rechteckiger Pfad um den Startpunkt\n        base_lat = self._drone_lat\n        base_lon = self._drone_lon\n        step = 0.001  # ~100m\n        \n        # Quadrat fliegen\n        for i in range(20):\n            self.sim_points.append((base_lat, base_lon + i * step, 100 + i * 5))\n        \n        for i in range(20):\n            self.sim_points.append((base_lat + i * step, base_lon + 19 * step, 200))\n        \n        for i in range(20):\n            self.sim_points.append((base_lat + 19 * step, base_lon + (19-i) * step, 200 - i * 5))\n        \n        for i in range(19):\n            self.sim_points.append((base_lat + (19-i) * step, base_lon, 100))\n    \n    def simulate_drone_movement(self):\n        """Simuliert eine Drohnenbewegung fu00fcr Testzwecke."""\n        try:\n            if not self.sim_points:\n                return\n                \n            # Nu00e4chsten Punkt aus der Simulation nehmen\n            lat, lon, alt = self.sim_points[self.sim_index]\n            \n            # Drohnenposition aktualisieren\n            self.update_drone_position(lat, lon, alt, 0, 5.0, 75)\n            \n            # Auf nu00e4chsten Punkt vorbereiten\n            self.sim_index = (self.sim_index + 1) % len(self.sim_points)\n            \n            # Karte auf Drohne zentrieren\n            self.center_on_drone()\n        except Exception as e:\n            print(f"Fehler beim Senden der Updates: {str(e)}")\n    \n    def update_drone_position(self, lat, lon, alt, heading=0, speed=0, battery=100):\n        """Aktualisiert die Drohnenposition auf der Karte"""\n        # Aktualisiere die internen Drohnendaten\n        self._drone_lat = lat\n        self._drone_lon = lon\n        self._drone_alt = alt\n        self._drone_speed = speed\n        self._drone_battery = battery\n        \n        # Aktualisiere das Widget, falls verfu00fcgbar\n        if self.map_widget and hasattr(self.map_widget, 'update_drone_position'):\n            print(f"[DEBUG] Karten-Update: {lat:.6f}, {lon:.6f}, {alt:.1f}m")\n            self.map_widget.update_drone_position(lat, lon, alt, heading, speed, battery)\n            \n        # Signal fu00fcr UI-Aktualisierung senden\n        self.dronePositionChanged.emit()\n    \n    def set_map_type(self, map_type):\n        """Setzt den Kartentyp (0=2D, 1=3D)"""\n        print(f"[INFO] Kartentyp geu00e4ndert: {map_type}")\n        self._map_type = map_type  # Speichere den aktuellen Map-Typ\n        \n        if self.map_widget:\n            # Je nach Kartentyp das Zoom-Level und die Ansichtseigenschaften anpassen\n            if map_type == 1: # 3D-Ansicht\n                self.map_widget.zoom = 2.0  # Gru00f6u00dferer Zoom fu00fcr 3D-Effekt\n            else: # 2D-Ansicht\n                self.map_widget.zoom = 1.0  # Normaler Zoom fu00fcr 2D-Draufsicht\n            \n            # Widget neu zeichnen\n            self.map_widget.update()\n            return True\n        return False\n    \n    @Slot()\n    def open_external_map(self):\n        """\u00d6ffnet die externe 3D-Karte in einem separaten Fenster."""\n        print("\n\n[DEBUG] open_external_map() wurde aufgerufen!\n\n")\n        \n        try:\n            # HTML-Datei mit Cesium finden\n            content_dir = Path(__file__).parents[2] / "RZGCSContent"\n            html_path = content_dir / "cesium" / "simple_3d_map.html"\n            \n            script_path = Path(__file__).parent.parent / "standalone_map.py"\n            parent_dir = script_path.parent.absolute()\n            \n            # Debug-Ausgaben\n            print(f"\n[DEBUG] Script-Pfad: {script_path}")\n            print(f"[DEBUG] Python-Interpreter: {sys.executable}\n")\n            \n            # Versuche, die externe 3D-Karte zu starten\n            os.system(f'start cmd /k "{sys.executable}" "{script_path}"')\n            print("[DEBUG] Externe 3D-Karte u00fcber os.system gestartet")\n            \n            # Als Backup auch via Popen versuchen\n            try:\n                subprocess.Popen([sys.executable, script_path], \n                                cwd=parent_dir, \n                                creationflags=subprocess.CREATE_NEW_CONSOLE)\n                print("[DEBUG] Externe 3D-Karte auch u00fcber Popen gestartet")\n            except Exception as sub_err:\n                print(f"[DEBUG] Popen-Fehler: {str(sub_err)}")\n            \n            print("Externe 3D-Kartenanwendung wurde gestartet")\n        except Exception as e:\n            print(f"\n\n[FEHLER] Beim Starten der externen 3D-Karte: {str(e)}\n\n")\n    \n    @Slot()\n    def center_on_drone(self):\n        """Zentriert die Karte auf die aktuelle Drohnenposition."""\n        if self.map_widget:\n            # Bei einer SimpleMapWidget-Instanz\n            if isinstance(self.map_widget, SimpleMapWidget):\n                self.map_widget.center_lat = self._drone_lat\n                self.map_widget.center_lon = self._drone_lon\n                self.map_widget.update()\n    \n    @Slot()\n    def follow_drone(self):\n        """Lu00e4sst die Kamera der Drohne folgen."""\n        # Identisch zu center_on_drone, da wir kein komplexes Folgeverhalten haben\n        self.center_on_drone()\n    \n    @Slot(bool)\n    def set_path_visible(self, visible):\n        """Stellt die Sichtbarkeit des Flugpfads ein."""\n        if self.map_widget and hasattr(self.map_widget, 'show_path'):\n            self.map_widget.show_path = visible\n            self.map_widget.update()\n\n\n# Hauptfunktion zum Testen des Controllers\ndef main():\n    app = QApplication(sys.argv)\n    \n    # Controller erstellen\n    controller = FlightViewController(None)\n    \n    # Eigenstu00e4ndiges Fenster anzeigen\n    window = QMainWindow()\n    window.setWindowTitle("RZGCS Flight Controller Test")\n    window.resize(800, 600)\n    \n    # Zentrales Widget\n    central_widget = QWidget()\n    window.setCentralWidget(central_widget)\n    \n    # Layout\n    layout = QVBoxLayout(central_widget)\n    \n    # Karten-Widget hinzufu00fcgen\n    map_widget = SimpleMapWidget()\n    layout.addWidget(map_widget)\n    \n    # Fenster anzeigen\n    window.show()\n    \n    # Drohnenposition simulieren\n    controller.map_widget = map_widget\n    controller.simulate_drone_movement()\n    controller.sim_timer.start()\n    \n    sys.exit(app.exec())\n\n\nif __name__ == "__main__":\n    main()
